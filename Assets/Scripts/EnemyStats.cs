using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

[CreateAssetMenu(fileName = "Enemy", menuName = "SongOfTrees/Enemy", order = 0)]
public class EnemyStats : ScriptableObject
{
    [SerializeField]
    private EnemyType enemyType;

    public LevelRange levelRange = new LevelRange();

    public EnemyAttributes[] attributes = new EnemyAttributes[Enum.GetValues(typeof(AttributeName)).Length];

    public EnemyCharacteristics[] characteristics = new EnemyCharacteristics[Enum.GetValues(typeof(CharacteristicName)).Length];

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void InitializeStats(Entity entity)
    {
        SetupLevel(entity);
        SetupAttributes(entity);
        SetupCharacteristics(entity);

        // switch (enemyType)
        // {

        // }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void SetupLevel(Entity entity)
    {
        int randomLevel = UnityEngine.Random.Range(levelRange.MinLevel, levelRange.MaxLevel + 1);
        entity.Level = randomLevel;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void SetupAttributes(Entity entity)
    {
        foreach (EnemyAttributes attribute in attributes)
        {
            entity.GetAttribute((int)attribute.Attribute).BaseValue = attributes[(int)attribute.Attribute].Value;
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void SetupVitals(Entity entity) { }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void SetupSkills(Entity entity) { }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void SetupCharacteristics(Entity entity)
    {
        foreach (EnemyCharacteristics characteristic in characteristics)
        {
            entity.GetCharacteristic((int)characteristic.Characteristic).BaseValue = characteristics[(int)characteristic.Characteristic].Value;
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[Serializable]
public struct LevelRange
{
    [Range(1, 99)] public int MinLevel;
    [Range(1, 99)] public int MaxLevel;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[Serializable]
public struct EnemyAttributes
{
    public AttributeName Attribute;
    public int Value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[Serializable]
public struct EnemyCharacteristics
{
    public CharacteristicName Characteristic;
    public int Value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public enum EnemyType
{
    Snail,
    Slime
}
